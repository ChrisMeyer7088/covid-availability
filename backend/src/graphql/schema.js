const { buildSchema } = require("graphql");

const schema = buildSchema(`
  type Query {
    artist(id: ID!): Artist,
    relatedArtists(id: ID!): [Artist],
    artists(ids: [ID!]!): [Artist],
    artistAlbums(id: ID!, market: String, limit: Int, offset: String, include_groups: String): [Album],
    artistTopTracks(id: ID!, market: String!): [Track],
    albums(ids: [ID]!, market: String): [Album],
    album(id: ID!, market: String): Album,
    albumTracks(id: ID!, market: String, limit: Int, offset: Int): [Track],
    track(id: ID!, market: String): Track,
    tracks(ids: [ID]!, market: String): [Track],
    trackAudioFeature(id: ID!): AudioFeature,
    tracksAudioFeatures(ids: [ID]!): [AudioFeature],
    markets: [String],
    user(user_id: ID!): User,
    me: User,
    browseNewReleases(country: String, limit: Int, offset: Int): BrowseAlbum,
    browseFeaturedPlaylists(country: String, locale: String, timestamp: String, limit: Int, offset: Int): BrowsePlaylist,
    browseCategoryPlaylists(category_id: ID!, country: String, limit: Int, offset: Int): BrowsePlaylist,
    getCategory(category_id: ID!, country: String, locale: String): Category,
    getCategories(country: String, locale: String, limit: Int, offset: Int): BrowseCategories,
    genres: [String],
  },
  type Image {
    height: Int,
    width: Int,
    url: String
  },
  type Followers {
    href: String,
    total: Int
  },
  type External_Urls {
    spotify: String,
  },
  type External_ID {
    isrc: String
  },
  type TrackNumber {
    href: String,
    total: Int,
  },
  type Category {
    id: ID!,
    href: String,
    icons: [Image],
    name: String,
  },
  type Artist {
    id: ID!,
    name: String!,
    external_urls: External_Urls,
    followers: Followers,
    genres: [String],
    href: String,
    images: [Image],
    popularity: Int,
    type: String,
    uri: String
  },
  type Album {
    id: ID!,
    name: String!,
    album_group: String,
    album_type: String,
    artists: [Artist],
    external_urls: External_Urls,
    href: String,
    images: [Image],
    release_date: String,
    release_date_precision: String,
    total_tracks: Int,
    type: String,
    uri: String,
    available_markets: [String],
  },
  type Track {
    id: ID!,
    name: String!,
    album: Album,
    artists: [Artist],
    disc_number: Int,
    duration_ms: Int,
    explicit: Boolean,
    external_ids: External_ID,
    external_urls: External_Urls
    href: String,
    is_local: Boolean,
    is_playable: Boolean,
    popularity: Int,
    preview_url: String,
    track_number: Int,
    type: String,
    uri: String,
    available_markets: [String],
  },
  type Playlist {
    id: ID!,
    name: String,
    collaborative: Boolean,
    description: String,
    external_urls: External_Urls,
    images: [Image],
    href: String,
    owner: User,
    primary_color: String,
    public: String,
    snapshot_id: String,
    tracks: TrackNumber,
    type: String,
    uri: String,
  },
  type AudioFeature {
    id: ID!,
    danceability: Float,
    energy: Float,
    key: Int,
    loudness: Float,
    mode: Int,
    speechiness: Float,
    acousticness: Float,
    instrumentalness: Float,
    liveness: Float,
    valence: Float,
    tempo: Float,
    type: String,
    uri: String,
    track_href: String,
    analysis_url: String,
    duration_ms: Int,
    time_signature: Int,
  }
  type User {
    id: ID!,
    display_name: String,
    external_urls: External_Urls,
    followers: Followers,
    href: String,
    images: Image,
    type: String,
    uri: String,
  },
  type BrowseAlbum {
    href: String,
    items: [Album],
    limit: Int,
    next: String,
    offset: Int,
    previous: String,
    total: Int,
  },
  type BrowsePlaylist {
    href: String,
    limit: Int,
    next: String,
    offset: Int,
    previous: String,
    total: Int,
    items: [Playlist]
  },
  type BrowseCategories {
    href: String,
    limit: Int,
    next: String,
    offset: Int,
    previous: String,
    total: Int,
    items: [Category]
  }
`);

module.exports = schema;
